app.value.annotation = Its value of key
app.value.myarray = test1,test2
app.value.logical = true
app.value.numericint = 7
!not supported
app.value.numericintarray = 7,10,11
! numericlong 7l will fail
app.value.numericlong = 7
app.value.numericdouble = 4.5



server.port=8888
server.servlet.context-path=/propsloader



## Custom datasource properties HikariCP ##
# Datasource URL
!Example : jdbc:oracle:thin:@172.16.16.1:1521:lsim
app.datasource.jdbcUrl=jdbc:mysql://localhost:3306/test
# Datasource username
!Example :
app.datasource.username=root
# Datasource password
!Example :
app.datasource.password=oracle
# Datasource driver class
!Example : oracle.jdbc.OracleDriver
app.datasource.driver-class-name=com.mysql.jdbc.Driver
# Keep pool connections alive query periodicly
app.datasource.connection-test-query= SELECT 1
# This property controls the minimum number of idle connections that HikariCP tries to maintain in the pool.
# If the idle connections dip below this value and total connections in the pool are less than maximumPoolSize,
# HikariCP will make a best effort to add additional connections quickly and efficiently.
# However, for maximum performance and responsiveness to spike demands,
# we recommend not setting this value and instead allowing HikariCP to act as a fixed size connection pool. Default: same as maximumPoolSize
app.datasource.minimumIdle=5
# This property controls the maximum size that the pool is allowed to reach, including both idle and in-use connections.
# Basically this value will determine the maximum number of actual connections to the database backend.
# A reasonable value for this is best determined by your execution environment.
# When the pool reaches this size, and no idle connections are available, calls to getConnection() will block for up to connectionTimeout milliseconds before timing out.
app.datasource.maximumPoolSize=20
# This property controls the maximum amount of time that a connection is allowed to sit idle in the pool.
# This setting only applies when minimumIdle is defined to be less than maximumPoolSize
app.datasource.idleTimeout=30000
# This property represents a user-defined name for the connection pool and appears mainly in logging and JMX management consoles to identify pools and pool configurations.
app.datasource.poolName=CustomDataSource
# This property controls the maximum amount of time that a connection is allowed to sit idle in the pool. Current
app.datasource.maxLifetime=600000
# This property controls the maximum number of milliseconds that a client will wait for a connection from the pool. Current 30 sec
app.datasource.connectionTimeout=30000

spring.jpa.hibernate.ddl-auto=update

spring.jpa.open-in-view=false

app.datasource.continue-on-error=true
